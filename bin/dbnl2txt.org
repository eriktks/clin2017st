#!/usr/bin/perl -w
# dbnl2txt: extract text from Statenvertaling file from DBNL: _sta001stat01_01
# usage: dbnl2txt [text-id] > file
# 20160817 erikt(at)xs4all.nl

use strict;

my $command = $0;
my $start = 9;
my $end = 1441;
# for debugging: process only the text with this number (9-1441)
if (defined $ARGV[0]) { $start = $end = shift(@ARGV); }
my $lineCounter = 1;
my $baseUrl = "http://dbnl.nl/tekst/_sta001stat01_01/_sta001stat01_01_";
# %skip: sections without bible text
# but is skipping files really necessary?
my %skip = qw(  59 1  100 1  128 1  165 1  200 1  225 1  247 1 
               252 1  284 1  309 1  332 1  358 1  388 1  425 1
               436 1  450 1  461 1  504 1  655 1  687 1  700 1
               709 1  776 1  829 1  835 1  884 1  897 1
               912 1  916 1  927 1  932 1  940 1  944 1
               948 1  952 1  955 1  970 1  975 1  976 1 1005 1
              1022 1 1047 1 1069 1 1098 1 1115 1 1132 1 1146 1
              1153 1 1160 1 1165 1 1170 1 1176 1 1180 1 1187 1
              1192 1 1197 1 1211 1 1217 1 1223 1 1227 1 1236 1
              1259 1 1260 1 1261 1 1336 1 1393 1);
# missing lines in this text version; we will insert a black line
my %missingLines = qw(16359 1 32996 1 32997 1);
my $downloads = 0;

if (not -d "html") { mkdir("html"); }
LOOP: for (my $id=$start;$id<=$end;$id++) {
   if (defined $skip{$id}) { next LOOP; }
   while ($id !~ /..../) { $id = "0$id"; }
   my $chaptersSeen = 0; # flag signaling chapter number seen
   my $notesSeen = 0; # flag signaling notes section seen
   my $openLine = 0; # flag for signaling output line without newline
   my $htmlFile = "html/$id.html";
   my $lastLine = "";
   my $inText = 0;
   if (-f $htmlFile) { open(INFILE,$htmlFile); }
   else {
      sleep(1); # wait one second to avoid overloading website
      print STDERR ".";
      $downloads++;
      open(INFILE,"curl -s -o - $baseUrl$id.php | tee $htmlFile |") or
         die "$command: cannot run curl to fetch data files!\n";
   }
   $id =~ s/^0+//;
   while (<INFILE>) {
      my $line = $_;
      chomp($line);
      # correct frequent html error in Old Testament text
      if ($id <= 974) {
         $line =~ s/<p class="indent">(\d+)\s/<h4>$1<\/h4><p>/;
      }
      if ($line =~ /<h4>\d+<\/h4>/) { $chaptersSeen = 1; }
      if ($line =~ /class="noten-kolom"/) { $notesSeen = 1; }
      if ($line =~ /<h4>/) { $inText = 1; }
      if ($line =~ /<p class="indent">\s*\D/) { $inText = 0; }
      if ($chaptersSeen and not $notesSeen and $inText) {
         # content line detected: split in html tags and text
         my @baseTokens = split(/([<>])/,$line);
         my @tokens = ();
         for (my $i=0;$i<=$#baseTokens;$i++) {
            if ($#tokens >= 0 and 
                $tokens[$#tokens] =~ /^</ and
                $tokens[$#tokens] !~ />$/) { 
               $tokens[$#tokens] .= $baseTokens[$i]; 
            } elsif ($baseTokens[$i] !~ /^\s*$/) { 
               push(@tokens,$baseTokens[$i]); 
            }
         }
         # print text between tags, except for verse numbers and footnote numbers
         my $outLine = "";
         my $lastTag = "";
         for (my $i=0;$i<=$#tokens;$i++) { 
            if ($tokens[$i] !~ /^<.*>$/ and 
                ($i == 0 or ($i > 0 and $tokens[$i-1] !~ /^<(div|h4|span|p class)/i))) { 
               $outLine .= $tokens[$i];
            }
            if ($tokens[$i] =~ /^<.*>$/) { $lastTag = $tokens[$i]; }
         }
         if ($line =~ /<h4/ and $openLine) { 
            print "\n"; 
            $openLine = 0; 
            $lineCounter++;
         }
         # test if the line is complete
         if ($outLine !~ /^\s*FINIS\s*$/ and $line !~ /<p class/) { 
            # split three combined lines
            if ($lineCounter == 14092 and $outLine) { $outLine =~ s/(ick sal)/\n$1/; $lineCounter++; }
            if ($lineCounter == 27697 and $outLine) { $outLine =~ s/(Ende dit)/\n$1/; $lineCounter++ }
            if ($lineCounter == 36673 and $outLine) { $outLine =~ tr/\015/\n/; $lineCounter++; }
            # there are two special characters not encoded as SGML entities
            $outLine =~ s/·/\&middot;/g;
            $outLine =~ s/ё/\&euml;/g;
            if ($lastTag !~ /^<div/ and $line =~ /<\/p>/) { 
               print "$outLine\n"; 
               $openLine = 0;
               $lineCounter++;
            } else { 
               $outLine =~ s/-\s*$//;
               print $outLine; 
               if ($outLine) { $openLine = 1; }
            } 
         }
      }
      if ($line !~ /^\s*$/) { $lastLine = $line; }
      while (defined $missingLines{$lineCounter}) {
         print "\n";
         $lineCounter++;
      }
   }
}
if ($downloads > 0) { print STDERR "\n"; }

exit(0);
