#!/usr/bin/perl -w
# herziene2txt: extract text from Herziene Statenvertaling: http://herzienestatenvertaling.nl/
# usage: herziene2txt < file
# 20160826 erikt(at)xs4all.nl

use strict;

my $command = $0;
my $lineCounter = 1;
my $baseUrl = "https://herzienestatenvertaling.nl/teksten";
# short names of books; do not use hash: is unordered
my @books =    qw(genesis exodus leviticus numeri deuteronomium jozua richteren ruth 1samuel 2samuel 1koningen 2koningen 1kronieken 2kronieken ezra nehemia esther job psalm spreuken prediker hooglied jesaja jeremia klaagliederen ezechiël daniël hosea joël amos obadja jona micha nahum habakuk zefanja haggaï  zacharia maleachi mattheüs markus lukas johannes handelingen romeinen 1korinthe 2korinthe galaten efeze filippenzen kolossenzen 1thessalonicenzen 2thessalonicenzen 1timotheüs 2timotheüs titus filemon hebreeën jakobus 1petrus 2petrus 1johannes 2johannes 3johannes judas openbaring);
# number of chapters per book
my %chapters = qw(genesis 50 exodus 40 leviticus 27 numeri 36 deuteronomium 34 jozua 24 richteren 21 ruth 4 
   1samuel 31 2samuel 24 1koningen 22 2koningen 25 1kronieken 29 2kronieken 36 ezra 10 nehemia 13 
   esther 10 job 42 psalm 150 spreuken 31 prediker 12 hooglied 8 jesaja 66 jeremia 52
   klaagliederen 5 ezechiël 48 daniël 12 hosea 14 joël 3 amos 9 obadja 1 jona 4 
   micha 7 nahum 3 habakuk 3 zefanja 3 haggaï 2 zacharia 14 maleachi 4
   mattheüs 28 markus 16 lukas 24 johannes 21 handelingen 28 romeinen 16 1korinthe 16 2korinthe 13 
   galaten 6 efeze 6 filippenzen 4 kolossenzen 4 1thessalonicenzen 5 2thessalonicenzen 3 1timotheüs 6 2timotheüs 4
   titus 3 filemon 1 hebreeën 13 jakobus 5 1petrus 5 2petrus 3 1johannes 5 2johannes 1
   3johannes 1 judas 1 openbaring 22);
# missing lines in this text version; we will insert a black line
my %missingLines = qw(14093 1 14726 1 14747 1 14765 1 14854 1 19225 1 22108 1 26913 1 27698 1);
my $downloads = 0;

if (not -d "html") { mkdir("html"); }
for (my $b=0;$b<=$#books;$b++) {
   if (not defined $chapters{$books[$b]}) { die "$command: book without chapters: $books[$b]\n"; }
   for (my $c=1;$c<=$chapters{$books[$b]};$c++) {
      my $htmlFile = "html/$books[$b]-$c.html";
      if (-f $htmlFile) { open(INFILE,$htmlFile); }
      else {
         sleep(1);
         print STDERR "."; 
         $downloads++;
         open(INFILE,"curl -s -o - '$baseUrl/$books[$b]/$c' | tee $htmlFile |") or
            die "$command: cannot run curl to fetch data files!\n";
      }
      my $outLine = "";
      while (<INFILE>) {
         my $line = $_;
         chomp($line);
         if ($line =~ /javascript:getParallel/ and $outLine ne "") {
            print "$outLine\n";
            $outLine = "";
            $lineCounter++;
         }
         if ($line =~ /<span class="verse-span"/i) {
            # remove html tags from line
	    # $line =~ s/^.*<span class="verse-span"[^<>]*>//i;
            # $line =~ s/<\/span>.*$//i;
	    $line =~ s/<span[^<>]*class="[a-uw-z][^<>]*>[^<>]*<\/span>//gi;
	    $line =~ s/<span[^<>]*class="v"[^<>]*>[^<>]*<\/span>//gi;
	    my $selectedLine = "";
	    while ($line =~ /<span[^<>]*class="verse-span"[^<>]*>([^<>]*)<\/span>/g) {
               $selectedLine = ($selectedLine eq "") ? $1 : "$selectedLine $1";
	    }
	    $line = $selectedLine;
            $line =~ s/.nbsp./ /gi;
            # change utf characters to ascii
            $line =~ s/–/-/g;
            $line =~ s/‘/'/g;
            $line =~ s/’/'/g;
            $line =~ s/“/"/g;
            $line =~ s/”/"/g;
            $outLine = ($outLine eq "") ? $line : "$outLine\n$line";
         }
         while (defined $missingLines{$lineCounter}) {
            print "\n";
            $lineCounter++;
         }
      }
      if ($outLine ne "") { print "$outLine\n"; $lineCounter++; }
      close(INFILE);
   }
}
if ($downloads > 0) { print STDERR "\n"; }
exit(0);
